// Multiply Machine Code

0011_01110	// ld $zero
0010_00011	// st $r3
0010_00100	// st $r4
0010_00101	// st $r5
0010_00110	// st $r6
0000_01111	// add $one
0010_00111	// st $r7
0000_01111	// add $one
0010_01000	// st $r8
0000_01111	// add $one
0010_01001	// st $r9
0000_01111	// add $one
0010_01010	// st $r10
0000_01111	// add $one
0010_01011	// st $r11
0110_00111	// memld $r7
0010_00000	// st $r0
0110_01000	// memld $r8
0010_00001	// st $r1
0110_01001	// memld $r9
0010_00010	// st $r2
0011_00001	// ld $r1
1101_00100	// brz FIRST_MULTIPLY_END
0001_01111	// sub $one
0010_00001	// st $r1
0011_00011	// ld $r3
1111_00000	// clr
0000_00000	// add $r0
0010_00011	// st $r3
0011_00100	// ld $r4
0000_01110	// add $zero
0010_00100	// st $r4
1111_00000	// clr
1011_00001	// jmp FIRST_MULTIPLY
0011_00011	// ld $r3
1101_00101	// brz LOWER_BITS_ARE_ZERO
1011_00010	// jmp LOWER_BITS_ARE_ZERO_END
0011_00100	// ld $r4
1101_00110	// brz SECOND_MULTIPLY_END
0001_01111	// sub $one
0010_00100	// st $r4
0011_00011	// ld $r3
0001_01111	// sub $one
1111_00000	// clr
0010_00011	// st $r3
0011_00101	// ld $r5
0000_00010	// add $r2
0010_00101	// st $r5
0011_00110	// ld $r6
0000_01110	// add $zero
0010_00110	// st $r6
1111_00000	// clr
1011_00011	// jmp SECOND_MULTIPLY
0011_00101	// ld $r5
0111_01011	// memst $r11
0011_00110	// ld $r6
0111_01010	// memst $r10


// String Match Machine Code

1000_00110	// ldi 6
0010_00000	// st $r0
1000_00111	// ldi 32
0010_00001	// st $r1
1000_01000	// ldi 64
0010_00010	// st $r2
1000_01001	// ldi 7
0010_00110	// st $r6
0110_00000	// memld $r0
0010_01000	// st $r8
1000_00011	// ldi 0
0010_00011	// st $r3
0011_01000	// ld $r8
0010_00000	// st $r0
1000_00100	// ldi 15
0010_00100	// st $r4
1000_00101	// ldi 4
0010_00111	// st $r7
0110_00001	// memld $r1
0010_00101	// st $r5
0011_00101	// ld $r5
0100_00100	// and $r4
0101_00000	// xor $r0
1101_10101	// brz MATCH
0011_00100	// ld $r4
1001_00001	// shl 1
0010_00100	// st $r4
0011_00000	// ld $r0
1001_00001	// shl 1
0010_00000	// st $r0
0011_00111	// ld $r7
0001_01111	// sub $one
0010_00111	// st $r7
1101_10110	// brz NEXT_ELEMENT
1011_10100	// jmp COMPARE
0011_00011	// ld $r3
0000_01111	// add $one
0010_00011	// st $r3
0011_00010	// ld $r2
0001_01111	// sub $one
0010_00010	// st $r2
1101_10111	// brz DONE
0011_00001	// ld $r1
0000_01111	// add $one
0010_00001	// st $r1
1011_10011	// jmp LOAD
0011_00011	// ld $r3
0111_00110	// memst $r6


// Closest Pair Machine Code

1000_00000	// ldi 255
0010_00000	// st $r0
1000_00001	// ldi 20
0010_00011	// st $r3
0010_00100	// st $r4
1000_00010	// ldi 127
0010_00111	// st $r7
0000_01111	// add $one
0010_01000	// st $r8
0110_01000	// memld $r8
0010_00001	// st $r1
0011_00011	// ld $r3
0001_01111	// sub $one
0010_00100	// st $r4
1101_01110  // brz END_INNERLOOP
0011_01000	// ld $r8
0000_01111	// add $one 
0010_01001  // st $r9
0110_01001	// memld $r9
0010_00010	// st $r2
0011_00001	// ld $r1
0001_00010	// sub $r2
0010_01010	// st $r10
0011_01110	// ld $zero
1001_00001	// shl 1
1101_01111	// brz NO_OVERFLOW
0011_00001	// ld $r1
0101_00010	// xor $r2
1010_00111	// shr 7
0001_01111	// sub $one
1101_10010	// brz CHECK_LOOP
1011_10000	// jmp TWOS_COMP
0011_01010	// ld $r10
0000_01110	// add $zero
1100_00111	// brneg TWOS_COMP
1011_01000	// jmp POS_RES
0011_01010  // ld $r10
1110_00000	// not
0000_01111	// add $one
0010_00101	// st $r5
0001_00000	// sub $r0
1100_01001	// brneg UPDATE_MIN
0011_00100	// ld $r4
0001_01111	// sub $one
0010_00100  // st $4
1101_01101	// brz END_INNERLOOP
0011_01001	// ld $r9
0000_01111	// add $one
0010_01001	// st $r9
1011_01010	// jmp INNER_LOOP
0011_00101	// ld $r5
0010_00000	// st $r0
1011_01011	// jmp CHECK_LOOP
0011_00011	// ld $r3
0001_01111	// sub $one
0010_00011  // st $r3
1101_10001	// brz END_OUTERLOOP
0011_01000  // ld $r8
1011_01100	// jmp OUTER_LOOP
0011_00000	// load r0 to acc
0111_00111	// mem store into 127

// Done
1011_00000	// done
