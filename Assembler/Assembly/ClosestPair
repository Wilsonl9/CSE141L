proc ClosestPair:

ldi 255			// load min val
st $r0			// min value
ldi 20			// array size
st $r3			// outer loop limit
st $r4			// inner loop limit
ldi 127			// move base mem address
st $r7			// memory address 127, will hold result later

OUTER_LOOP:
	add $one					// 127 + 1, then  used to inc mem address
	st $r8						// holds current address of element
	memld $r8 				// Load element into accumulator
	st $r1						// first array element A[i]
	ld $r3						// 20 to r3
	sub $one					// sub 1 to run i-1 times
	st $r4						// store in r4
	
	brz END_INNERLOOP

	ld $r8 // new
	add $one 
	st $r9

	INNER_LOOP:
		memld $r9 //memld $r8			// next elem into acc
		st $r2					// second array elem
		ld $r1					// load $r1 into accum acc=A[i]
		sub $r2					// A[i] - A[j], first elem - second
		
		st $r10					// store A[i] - A[j] into $r10
		ld $zero				// load in a zero
		shl 1					// move in the carry bit
		brz NO_OVERFLOW				// check to see if the number overflowed if not then check if lower bits are negative
		ld $r1					// potential overflow so check the original signs
		xor $r2					// if both were negative then it is fine
		shr 7					// check the negative bit
		sub $one				// turns 1 to 0 and 0 to -1
		brz CHECK_LOOP
		jmp TWOS_COMP				// continues with distance calculation

	NO_OVERFLOW:
		ld $r10					// if it did not overflow check if the lower bits are negative
		add $zero				// set the negative bit if the lower bits are negative

		brneg TWOS_COMP			// dist, abs val of result
		jmp POS_RES 			// positive result

	TWOS_COMP:
		ld $r10
		not 					// negate the result
		add $one			

	POS_RES:
		st $r5 					// dist into $r5
		sub $r0				// dist - min
		brneg UPDATE_MIN			// update min if neg res
		
		CHECK_LOOP:
			ld $r4				// load r3 -1 
			sub $one			// decrement inner loop 
			st $r4	// 3/22 added
			brz END_INNERLOOP 	// inner loop done 
			ld $r9					// move $r8 into acc to increment
			add $one				// increment address
			st $r9 //st $r8					// store back into $r8
			jmp INNER_LOOP		// next iteration

		UPDATE_MIN:
			ld $r5				// move dist to acc
			st $r0				// update min
			jmp CHECK_LOOP
	
	END_INNERLOOP:
	//ld $r8 // new
	//add $one
	//st $r8

	ld $r3						// boundary check
	sub $one		
	st $r3			
	brz END_OUTERLOOP			// finish outer loop
	ld $r8 // new
	jmp OUTER_LOOP				// next iteration
END_OUTERLOOP:
	ld $r0
	memst $r7
done
