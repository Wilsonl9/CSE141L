/********************************
* Multiply:
*
* Pre-conditions:
* $r7 = 1
* $r8 = 2
* $r9 = 3
* $r10 = 4
* $r11 = 5
* 
* Registers:
* $r0: first operand
* $r1: second operand
* $r2: third operand
* $r3: low bits intermediate answer
* $r4: high bits intermediate answer
* $r5: low bits answer
* $r6: high bits answer
* $r7: mem address 1
* $r8: mem address 2
* $r9: mem address 3
* $r10: mem address 4
* $r11: mem address 5
********************************/

proc mult:

ld $zero						// clears the accumulator
st $r3							// sets low bits of intermediate answer to 0
st $r4							// sets high bits of intermediate answer to 0
st $r5							// sets low bits of answer to 0
st $r6							// sets high bits of answer to 0
add $one					// Increment the accumulator to 1
st $r7
add $one					// Increment the accumulator to 2
st $r8
add $one					// Increment the accumulator to 3
st $r9
add $one					// Increment the accumulator to 4
st $r10
add $one					// Increment the accumulator to 5
st $r11
memld $r7 					// Load A into r0
st $r0							// stores the first operand
memld $r8					// Load B into r1
st $r1							// stores the second operand
memld $r9					// Load B into r1
st $r2							// stores the second operand

FIRST_MULTIPLY:
	ld $r1					// loads the first operand
	brz FIRST_MULTIPLY_END			// breaks out of loop if the first operand is 0
	sub $one					// decrement the first operand
	st $r1					// save the decrement change
	ld $r3					// loads the low bits of intermediate answer
	clr					// clears the flag bits from the subtraction
	add $r0					// adds the first operand to the sum
	st $r3					// store the low bits of intermediate answer
	ld $r4					// loads the high bits of intermediate answer
	add $zero					// add the carry from the previous operation
	st $r4						// store the high bits of intermediate answer
	clr						// clear the alu flags
	jmp FIRST_MULTIPLY			// loop again
FIRST_MULTIPLY_END:

SECOND_MULTIPLY:
	ld $r3						// loads the third operand
	brz LOWER_BITS_ARE_ZERO			// checks high bits if low intermediate is 0
	jmp LOWER_BITS_ARE_ZERO_END	// goes to add if not
LOWER_BITS_ARE_ZERO:
	ld $r4						// load the high bits of intermediate
	brz SECOND_MULTIPLY_END		// breaks if the high bits of intermediate 0
	sub $one					// decrement the high bits of intermediate
	st $r4						// store the high bits of intermediate
	ld $r3						// load the low bits of intermediate which is 0
//	not						// turn the low bits of intermediate all to 1s
LOWER_BITS_ARE_ZERO_END:
	sub $one					// decrement the low bits of intermediate
	clr						// clear the alu flags
	st $r3						// store the low bits of intermediate answer
	ld $r5						// loads the low bits of answer
	add $r2					// adds the third operand to the sum
	st $r5						// stores the low bits of answer
	ld $r6						// loads the high bits of answer
	add $zero					// adds the carry from the previous operation
	st $r6						// stores the high bits of answer
	clr						// clear the alu flags
	jmp SECOND_MULTIPLY			// loop again
SECOND_MULTIPLY_END:
	ld $r5						// loads the memory address 5
	memst $r11					// stores the lower bits at address 5
	ld $r6						// loads the memory address 4
	memst $r10					// stores the higher bits at address 4
	done
